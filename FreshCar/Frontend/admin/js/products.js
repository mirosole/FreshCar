
const API_URL = "http://localhost:5064/api/products";
const CATEGORY_API_URL = "http://localhost:5064/api/categories";
const IMAGE_BASE_PATH = "/img/products/";
const DEFAULT_IMAGE = IMAGE_BASE_PATH + "default-image.png";

const table = document.querySelector(".tbody");
let editingProductId = null;
let categoriesCache = [];

// üìå –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
async function loadCategories() {
    try {
        const response = await fetch(CATEGORY_API_URL);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");

        categoriesCache = await response.json();

        const select = document.getElementById("input-category");
        select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é --</option>';
        categoriesCache.forEach(cat => {
            const option = document.createElement("option");
            option.value = cat.id;
            option.textContent = cat.name;
            select.appendChild(option);
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    }
}

// üìå –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function loadProducts() {
    const token = localStorage.getItem("token");
    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    try {
        const response = await fetch(API_URL, {
            headers: { "Authorization": `Bearer ${token}` }
        });

        if (response.status === 401) {
            alert("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.");
            return;
        }
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤");

        const products = await response.json();
        renderProducts(products);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
        table.innerHTML = "<tr><td colspan='10'>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</td></tr>";
    }
}

// üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
function renderProducts(data) {
    table.innerHTML = "";

    data.forEach(product => {
        const imageUrl = product.imageUrl ? product.imageUrl : DEFAULT_IMAGE;
        const row = document.createElement("tr");

        row.innerHTML = `
            <td><img src="${imageUrl}" width="50" onerror="this.src='${DEFAULT_IMAGE}'"></td>
            <td>${product.id}</td>
            <td>${product.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</td>
            <td>${product.price ? product.price.toFixed(2) + " Kƒç" : "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}</td>
            <td>${product.quantity ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}</td>
            <td>${product.categoryName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</td>
            <td>${product.shortDescription || "–ù–µ—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"}</td>
            <td>${product.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</td>
            <td>${product.options?.colors?.length ? product.options.colors.join(", ") : "–ù–µ—Ç —Ü–≤–µ—Ç–æ–≤"}</td>
            <td>
                <button class="edit-product-btn" data-id="${product.id}">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button class="delete-product-btn" data-id="${product.id}">‚ùå –£–¥–∞–ª–∏—Ç—å</button>
            </td>
        `;

        table.appendChild(row);
    });

    document.querySelectorAll(".edit-product-btn").forEach(btn => {
        btn.addEventListener("click", async (event) => {
            const productId = event.target.dataset.id;
            const product = await getProductById(productId);
            fillEditForm(product);
        });
    });

    document.querySelectorAll(".delete-product-btn").forEach(btn => {
        btn.addEventListener("click", async (event) => {
            const productId = event.target.dataset.id;
            await deleteProduct(productId);
        });
    });
}

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
async function getProductById(productId) {
    const token = localStorage.getItem("token");
    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    try {
        const response = await fetch(`${API_URL}/${productId}`, {
            headers: { "Authorization": `Bearer ${token}` }
        });

        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞");
        return await response.json();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}

// üìå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function fillEditForm(product) {
    document.getElementById("form-title").innerText = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:";
    document.getElementById("input-img").value = "";
    document.getElementById("input-name").value = product.name || "";
    document.getElementById("input-subtitle").value = product.shortDescription || "";
    document.getElementById("input-descr").value = product.description || "";
    document.getElementById("input-price").value = product.price || "";
    document.getElementById("input-quantity").value = product.quantity || "";
    document.getElementById("input-category").value = product.categoryId || "";
    document.getElementById("input-colors").value = Array.isArray(product.colors) ? product.colors.join(", ") : "";

    const addBtn = document.querySelector(".add-product");
    addBtn.innerText = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è";
    addBtn.dataset.editingId = product.id;
    editingProductId = product.id;
}

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function saveProduct() {
    const token = localStorage.getItem("token");
    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    const name = document.getElementById("input-name").value.trim();
    const description = document.getElementById("input-descr").value.trim();
    const shortDescription = document.getElementById("input-subtitle").value.trim();
    const price = parseFloat(document.getElementById("input-price").value);
    const quantity = parseInt(document.getElementById("input-quantity").value);
    const categoryId = parseInt(document.getElementById("input-category").value);
    const rawColors = document.getElementById("input-colors").value;
    const colors = rawColors
        .split(",")
        .map(c => c.trim())
        .filter(c => c.length > 0);

    if (!name || !description || isNaN(price) || isNaN(quantity) || isNaN(categoryId)) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!");
        return;
    }

    if (colors.length === 0) {
        colors.push("–ù–µ—Ç —Ü–≤–µ—Ç–∞");
    }

    const formData = new FormData();
    formData.append("name", name);
    formData.append("description", description);
    formData.append("shortDescription", shortDescription);
    formData.append("price", price);
    formData.append("quantity", quantity);
    formData.append("categoryId", categoryId);
    formData.append("colors", colors.join(","));

    const imageFile = document.getElementById("input-img").files[0];
    if (imageFile) {
        formData.append("image", imageFile);
    }

    const method = editingProductId ? "PUT" : "POST";
    const url = editingProductId ? `${API_URL}/${editingProductId}` : API_URL;

    try {
        const response = await fetch(url, {
            method,
            headers: { "Authorization": `Bearer ${token}` },
            body: formData
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", errorText);
            alert(`–û—à–∏–±–∫–∞: ${errorText}`);
            return;
        }

        document.getElementById("add-product-form").reset();
        document.getElementById("form-title").innerText = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:";
        document.querySelector(".add-product").innerText = "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä +";
        editingProductId = null;
        loadProducts();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.");
    }
}

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function deleteProduct(productId) {
    const token = localStorage.getItem("token");
    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?")) return;

    const response = await fetch(`${API_URL}/${productId}`, {
        method: "DELETE",
        headers: { "Authorization": `Bearer ${token}` }
    });

    if (response.status === 401) {
        alert("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.");
        return;
    }

    loadProducts();
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener("DOMContentLoaded", async () => {
    await loadCategories();
    await loadProducts();
    document.querySelector(".add-product").addEventListener("click", saveProduct);
});
