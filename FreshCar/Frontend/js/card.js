import { addHeader, addFooter } from "/js/addHTML.js";
import { getCart, saveCart, cartCounter } from "/js/cartCounter.js";

const API_URL = "http://localhost:5064/api";

addHeader();
addFooter();

// üìå –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL
function getProductId() {
    const params = new URLSearchParams(window.location.search);
    return params.get("id");
}

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
async function loadProduct() {
    const productId = getProductId();
    if (!productId) {
        console.error("ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL");
        return;
    }

    try {
        let response = await fetch(`${API_URL}/products/${productId}`);
        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞");
        }

        let product = await response.json();
        renderProduct(product);
        await loadSimilarProducts(product.categoryId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:", error);
    }
}

// üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
function renderProduct(product) {
    document.querySelector(".product__block__title").textContent = product.name;
    document.querySelector(".product__block__descr").textContent = product.description;
    document.querySelector(".product__block__price p").textContent = `${product.price} Kƒç`;
    document.querySelector(".product__img img").src = product.imageUrls[0] || "/img/no-image.png";

    // üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (product.options && product.options.colors) {
        document.querySelector(".product__block__options").innerHTML = product.options.colors
            .map(color => `<span class="product__block__options__item">${color}</span>`)
            .join("");
    }

    // üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    document.querySelector(".product__block__btn").addEventListener("click", () => addToCart(product));
}

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã (–∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
async function loadSimilarProducts(categoryId) {
    try {
        let response = await fetch(`${API_URL}/products?category=${categoryId}`);
        let products = await response.json();

        // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö
        const currentProductId = getProductId();
        products = products.filter(product => product.id !== parseInt(currentProductId));

        // –í—ã–±–∏—Ä–∞–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
        const shuffled = products.sort(() => Math.random() - 0.5).slice(0, 2);

        const similarProductsContainer = document.querySelector(".suggestions__offers__block");
        similarProductsContainer.innerHTML = shuffled
            .map(product => `
                <div class="catalog__item">
                    <a href="/html/card.html?id=${product.id}" class="catalog__item__img">
                        <img src="${product.imageUrls[0]}" alt="${product.name}">
                    </a>
                    <div class="catalog__item__text">
                        <a href="/html/card.html?id=${product.id}" class="catalog__item__title">${product.name}</a>
                        <div class="catalog__item__details">${product.price} Kƒç</div>
                    </div>
                </div>
            `)
            .join("");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:", error);
    }
}

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async function addToCart(product) {
    const quantity = document.getElementById("product-quantity-input")?.value || 1;
    const optionBtns = document.querySelectorAll(".product__block__options__item");

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ü–≤–µ—Ç
    function findActiveBtn() {
        let option = null;
        optionBtns.forEach(btn => {
            if (btn.classList.contains("active")) {
                option = btn.textContent;
            }
        });
        return option;
    }

    const selectedOption = findActiveBtn();
    if (!selectedOption) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç!");
        return;
    }

    const cartItem = {
        productId: product.id,
        quantity: Number(quantity),
        option: selectedOption
    };

    try {
        const token = localStorage.getItem("token");
        let response = await fetch(`${API_URL}/cart`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify(cartItem)
        });

        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É");
        }

        alert("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!");
        cartCounter(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    }
}

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", loadProduct);
